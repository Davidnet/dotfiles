" General "{{{
" Based on gmarik .vimrc
set nocompatible               " be iMproved
scriptencoding utf-8           " utf-8 all the way
set encoding=utf-8
set shiftround                 " round indent to multiple of 'shiftwidth'
set wrap                       " wrap line visually
set history=1000               " remember more commands and search history
set undolevels=1000            " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                      " change the terminal's title
set pastetoggle=<F2>          " toggle between paste and normal: for 'safer' pasting from keyboard
set modeline
set modelines=5                " default numbers of lines to read for modeline instructions
set autoread
set hlsearch                   " highlight search
set ignorecase                 " be case insensitive when searching
set smartcase                  " be case sensitive when input has a capital letter
set incsearch                  " show matches while typing
let g:is_posix = 1             " vim's default is archaic bourne shell, bring it up to the 90s
" "}}}
" Formatting "{{{
set tabstop=4                  " tab size eql 4 spaces
set softtabstop=4
set shiftwidth=4               " default shift width for indents
set expandtab                  " replace tabs with ${tabstop} spaces
set smarttab                   " Oh god the war, of tabs and spaces see a vimdoc
set backspace=indent
set backspace+=eol
set backspace+=start           " See http://vim.wikia.com/wiki/Backspace_and_delete_problems
set autoindent
set copyindent
set clipboard^=unnamedplus
" "}}}
" Visual "{{{
syntax on                      " enable syntax
set mousehide                 " Hide mouse after chars typed
set number                    " line numbers On
set showmatch                 " Show matching brackets.
set list                      " display unprintable characters f12 - switches
set listchars=tab:\ ·,eol:¬
set listchars+=trail:·
set listchars+=extends:»,precedes:«
map <silent> <F12> :set invlist<CR>
set laststatus=2
nnoremap <C-R> :let @/=""<CR><C-R>
" "}}}
" Plugin {{{
call plug#begin('~/.vim/plugged')
" align stuff
Plug 'junegunn/vim-easy-align'
" easy motion on rule
Plug 'easymotion/vim-easymotion'
" adding tmux.conf syntax checker
Plug 'tmux-plugins/vim-tmux'
" adding commenting stuff
Plug 'scrooloose/nerdcommenter'
" adding Jedi-Vim
Plug 'davidhalter/jedi-vim'
" vim current word
Plug 'dominikduda/vim_current_word'
" Plug to align stuff and Tabular
Plug 'godlygeek/tabular'
" Plug to supertab
Plug 'ervandew/supertab'
" vim-airline theme installation
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Vim gutter git
Plug 'airblade/vim-gitgutter'
" Adding vim-conda
Plug 'cjrh/vim-conda'
" startuptime log
Plug 'tweekmonster/startuptime.vim'
" undotree
Plug 'mbbill/undotree'
" Adding tmux navigation
Plug 'christoomey/vim-tmux-navigator'
" vim HTML design
Plug 'mattn/emmet-vim'
" vim for coconut
Plug 'manicmaniac/coconut.vim'
" Initialize plugin system
call plug#end()
let g:EasyMotion_do_mapping = 0 " Disable default mappings
" Jump to anywhere you want with minimal keystrokes, with just one key binding
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" jedi-vim use tabs when going to a definition etc:
let g:jedi#use_tabs_not_buffers = 1
" Disable vim-conda messages
let g:conda_startup_msg_suppress = 1
" remap for undotree
nnoremap <F5> :UndotreeToggle<cr>
" Set persistent undo 
if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif
" }}}
